package tcpSocket;

import java.util.ArrayList;

public class ServerPanel extends javax.swing.JFrame implements FrameBehavior
{

	public static ArrayList<Client> clients;

	/**
	 * Creates new form ServerPanel
	 */
	public ServerPanel()
	{
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jScrollPane1 = new javax.swing.JScrollPane();
      txtMesajlar = new javax.swing.JTextArea();
      jScrollPane2 = new javax.swing.JScrollPane();
      txtPort = new javax.swing.JTextPane();
      btnServerStart = new javax.swing.JButton();
      jLabel2 = new javax.swing.JLabel();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      txtMesajlar.setColumns(20);
      txtMesajlar.setRows(5);
      jScrollPane1.setViewportView(txtMesajlar);

      txtPort.setText("5004");
      txtPort.setName("txtPort"); // NOI18N
      jScrollPane2.setViewportView(txtPort);

      btnServerStart.setText("Start Server");
      btnServerStart.setName("btnStartServer"); // NOI18N
      btnServerStart.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnServerStartActionPerformed(evt);
         }
      });

      jLabel2.setText("Port:");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(40, 40, 40)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addGroup(layout.createSequentialGroup()
                  .addGap(2, 2, 2)
                  .addComponent(jLabel2)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(27, 27, 27)
                  .addComponent(btnServerStart)))
            .addContainerGap(39, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(21, 21, 21)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(btnServerStart)
               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                  .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)))
            .addGap(18, 18, 18)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(25, Short.MAX_VALUE))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void btnServerStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServerStartActionPerformed
		 ServerListener newHosting = new ServerListener(txtPort.getText(), this);
		 newHosting.start();
		 btnServerStart.setEnabled(false);
		 printResult("Server Started");
    }//GEN-LAST:event_btnServerStartActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try
		{
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
			{
				if ("Nimbus".equals(info.getName()))
				{
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		}
		catch (ClassNotFoundException ex)
		{
			java.util.logging.Logger.getLogger(ServerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch (InstantiationException ex)
		{
			java.util.logging.Logger.getLogger(ServerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch (IllegalAccessException ex)
		{
			java.util.logging.Logger.getLogger(ServerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch (javax.swing.UnsupportedLookAndFeelException ex)
		{
			java.util.logging.Logger.getLogger(ServerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new ServerPanel().setVisible(true);
			}
		});
	}

	@Override
	public void makeAction(String msg, Client client)
	{
		String mParsed[] = msg.split(" ");

		if (mParsed.length >= 2)
		{
			if (mParsed[0].equals("Nickname"))
			{
				client.nickname = mParsed[1];
				printResult(msg);
			}
			else if ((mParsed.length >= 3) && (mParsed[0].equals("Message")))
			{
				String[] parts = msg.split(" ", 2);
				String[] parts2 = parts[1].split(" ", 2);
				String sendTo = parts2[0];
				String message = parts2[1];

				//clients.get(mParsed[1]).myOutputMessages.add(client.nickname + " " + message); // try to use this instead of for statement
				switch (mParsed[1])
				{
					case "all":
						for (Client clt : clients)
							clt.myOutputMessages.add(client.nickname + " " + message);
						break;
					default:
						for (Client clt : clients)
							if (mParsed[1].equals(clt.nickname))
								clt.myOutputMessages.add(client.nickname + " " + message);
						break;
				}
				printResult("To \"" + sendTo + "\", from \"" + client.nickname + "\": " + message);
			}
		}

		repaint();
	}

	public void printResult(String msg)
	{
		txtMesajlar.setText(txtMesajlar.getText() + "\n" + msg);
	}

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnServerStart;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JTextArea txtMesajlar;
   private javax.swing.JTextPane txtPort;
   // End of variables declaration//GEN-END:variables
}
